import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as t,f as o}from"./app-CX4iMBMp.js";const l={},i=o(`<p>Як і в багатьох мовах програмування, в C# є своя система типів даних, яка використовується для створення змінних. Тип даних визначає внутрішнє представлення даних, множину значень, які може приймати об&#39;єкт, і навіть допустимі дії, які можна застосовувати над об&#39;єктом.</p><p>У мові C# є такі базові типи даних:</p><ul><li><p>bool: зберігає значення true чи false (логічні літерали). Представлений системним типом System.Boolean</p><pre><code>  bool alive = true;
  bool isDead = false;
</code></pre></li><li><p>byte: зберігає ціле число від 0 до 255 та займає 1 байт. Представлений системним типом System.Byte</p><pre><code>  byte bit1 = 1;
  byte bit2 = 102;
</code></pre></li><li><p>sbyte: зберігає ціле число від -128 до 127 та займає 1 байт. Представлений системним типом System.SByte</p><pre><code>  sbyte bit1 = -101;
  sbyte bit2 = 102;
</code></pre></li><li><p>short: зберігає ціле число від -32768 до 32767 і займає 2 байти. Представлений системним типом System.Int16</p><pre><code>  short n1 = 1;
  short n2 = 102;
</code></pre></li><li><p>ushort: зберігає ціле число від 0 до 65535 і займає 2 байти. Представлений системним типом System.UInt16</p><pre><code>  ushort n1 = 1;
  ushort n2 = 102;
</code></pre></li><li><p>int: зберігає ціле число від -2147483648 до 2147483647 і займає 4 байти. Представлений системним типом System.Int32. Всі цілі літерали за замовчуванням представляють значення типу int:</p><pre><code>  int a = 10;
  int b = 0b101; // Бінарна форма b = 5
  int c = 0xFF; // шістнадцяткова форма c = 255
</code></pre></li><li><p>uint: зберігає ціле число від 0 до 4294967295 і займає 4 байти. Представлений системним типом System.UInt32</p><pre><code>  uint a = 10;
  uint b = 0b101;
  uint c = 0xFF;
</code></pre></li><li><p>long: зберігає ціле число від -9223372036854775808 до 9223372036854775807 і займає 8 байт. Представлений системним типом System.Int64</p><pre><code>  long a = -10;
  long b = 0b101;
  long c = 0xFF;
</code></pre></li><li><p>ulong: зберігає ціле число від 0 до 18446744073709551615 і займає 8 байт. Представлений системним типом System.UInt64</p><pre><code>  ulong a = 10;
  ulong b = 0b101;
  ulong c = 0xFF;
</code></pre></li><li><p>float: зберігає число з плаваючою комою від -3.4<em>10^38 до 3.4</em>10^38 і займає 4 байти. Представлений системним типом System.Single</p></li><li><p>double: зберігає число з плаваючою комою від ±5.0<em>10^-324 до ±1.7</em>10^308 та займає 8 байти. Представлений системним типом System.Double</p></li><li><p>decimal: зберігає десяткове дробове число. Якщо використовується без десяткової коми, має значення від ±1.0<em>10^-28 до ±7.9228</em>10^28, може зберігати 28 знаків після коми і займає 16 байт. Представлений системним типом System.Decimal</p></li><li><p>char: зберігає одиночний символ у кодуванні Unicode і займає 2 байти. Представлений системним типом System.Char. Цьому типу відповідають символьні літерали:</p><pre><code>  char a = &#39;A&#39;;
  char b = &#39;\\x5A&#39;;
  char c = &#39;\\u0420&#39;;
</code></pre></li><li><p>string: зберігає набір символів Unicode. Представлений системним типом System.String. Цьому типу відповідають рядкові літерали.</p><pre><code>  string hello = &quot;Hello&quot;;
  string word = &quot;world&quot;;
</code></pre></li><li><p>object: може зберігати значення будь-якого типу даних і займає 4 байти на 32-розрядній платформі та 8 байт на 64-розрядній платформі. Представлений системним типом System.Object, який є базовим для всіх інших типів та класів .NET.</p><pre><code>  object a = 22;
  object b = 3.14;
  object c = &quot;hello code&quot;;
</code></pre></li></ul><p>Наприклад, визначимо кілька змінних різних типів і виведемо їх значення на консоль:</p><pre><code>string name = &quot;Tom&quot;;
int age = 33;
bool isEmployed = false;
double weight = 78,65;

Console.WriteLine($&quot;Ім&#39;я: {name}&quot;);
Console.WriteLine($&quot;Вік: {age}&quot;);
Console.WriteLine($&quot;Вага: {weight}&quot;);
Console.WriteLine($&quot;Працює: {isEmployed}&quot;);
</code></pre><p>Для виведення даних на консоль тут застосовується інтерполяція: перед рядком ставиться знак $ і після цього ми можемо вводити в рядок в фігурних дужках значення змінних. Консольний вивід програми:</p><pre><code>Ім&#39;я: Tom
Вік: 33
Вага: 78,65
Працює: False
</code></pre><h2 id="використання-суфіксів" tabindex="-1"><a class="header-anchor" href="#використання-суфіксів"><span>Використання суфіксів</span></a></h2><p>При присвоєнні значень слід пам&#39;ятати такий момент: всі речові літерали (дробові числа) розглядаються як значення типу double. І щоб вказати, що дробове число представляє тип float або тип decimal, необхідно до літералу додавати суфікс: F/f - для float і M/m - для decimal.</p><pre><code>float a = 3.14F;
float b = 30.6f;

decimal c = 1005.8M;
decimal d = 334.8m;
</code></pre><p>Подібним чином всі цілі літерали розглядаються як значення типу int. Щоб явним чином вказати, що цілий літерал представляє значення типу uint, треба використовувати суфікс U/u, для типу long - суфікс L/l, а для типу ulong - суфікс UL/ul:</p><pre><code>uint a = 10U;
long b = 20L;
ulong c = 30UL;
</code></pre><h2 id="використання-системних-типів" tabindex="-1"><a class="header-anchor" href="#використання-системних-типів"><span>Використання системних типів</span></a></h2><p>Вище при перерахуванні всіх базових типів даних для кожного згадувався системний тип. Тому що назва вбудованого типу по суті є скороченим позначенням системного типу. Наприклад, наступні змінні будуть еквівалентні за типом:</p><pre><code>int a = 4;
System.Int32 b = 4;
</code></pre><h2 id="неявна-типізація" tabindex="-1"><a class="header-anchor" href="#неявна-типізація"><span>Неявна типізація</span></a></h2><p>Раніше ми явно вказували тип змінних, наприклад, int x;. І компілятор при запуску вже знав, що x зберігає ціле значення.</p><p>Однак ми можемо використовувати модель неявної типізації:</p><pre><code>var hello = &quot;Hell to World&quot;;
var c = 20;
</code></pre><p>Для неявної типізації замість назви типу даних використовується ключове слово var. Потім вже при компіляції компілятор сам виводить тип даних з присвоєного значення. Так як за замовчуванням всі цілочисленні значення розглядаються як значення типу int, то в результаті змінна c матиме тип int. Аналогічно змінній hello присвоюється рядок, тому ця змінна матиме тип string.</p><p>Ці змінні подібні до звичайних, проте вони мають деякі обмеження.</p><p>По-перше, ми не можемо спочатку оголосити змінну, що неявно типізується, а потім ініціалізувати:</p><pre><code>// Цей код працює
int a;
a = 20;

// Цей код не працює
var c;
c = 20;
</code></pre><p>По-друге, ми не можемо вказати як значення змінної null, що неявно типізується:</p><pre><code>// Цей код не працює
var c=null;
</code></pre><p>Оскільки значення null, то компілятор не зможе вивести тип даних.</p>`,26),p=[i];function r(c,a){return n(),t("div",null,p)}const m=e(l,[["render",r],["__file","topic4.html.vue"]]),u=JSON.parse('{"path":"/theory/theory2/topic4.html","title":"Типи даних","lang":"en-US","frontmatter":{"title":"Типи даних"},"headers":[{"level":2,"title":"Використання суфіксів","slug":"використання-суфіксів","link":"#використання-суфіксів","children":[]},{"level":2,"title":"Використання системних типів","slug":"використання-системних-типів","link":"#використання-системних-типів","children":[]},{"level":2,"title":"Неявна типізація","slug":"неявна-типізація","link":"#неявна-типізація","children":[]}],"git":{"createdTime":1712559663000,"updatedTime":1712559663000,"contributors":[{"name":"VasylMartynWork","email":"killermbjustthink@gmail.com","commits":1}]},"readingTime":{"minutes":2.78,"words":833},"filePathRelative":"theory/theory2/topic4.md","localizedDate":"April 8, 2024"}');export{m as comp,u as data};
