import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o,c as t,f as p}from"./app-CX4iMBMp.js";const n={},r=p(`<p>Для зберігання даних у програмі використовуються змінні. Змінна являє саме іменовану частину пам&#39;яті, в якій зберігається значення певного типу. Змінна має тип, ім&#39;я та значення. Тип визначає, якого роду інформацію може зберігати змінна.</p><p>Перед використанням будь-яку змінну слід визначити. Синтаксис визначення змінної виглядає так:</p><pre><code>тип ім&#39;я_змінної;
</code></pre><p>Спочатку йде тип змінної, потім її ім&#39;я. Іменем змінної може виступати будь-яка довільна назва, яка задовольняє наступним вимогам:</p><ul><li><p>Ім&#39;я може містити будь-які цифри, букви та символ підкреслення, при цьому перший символ в імені має бути буквою або символом підкреслення;</p></li><li><p>В імені не повинно бути знаків пунктуації та пропусків;</p></li><li><p>Ім&#39;я не може бути ключовим словом мови C#. Таких слів не так багато, і під час роботи у Visual Studio середовище розробки підсвічує ключові слова синім кольором.</p></li></ul><p>Хоча ім&#39;я зміною може бути будь-яким, але слід давати змінним описові імена, які будуть говорити про їхнє призначення.</p><p>Наприклад, визначимо найпростішу змінну:</p><pre><code>string name;
</code></pre><p>У цьому випадку визначено змінну name, яка має тип string. Тобто змінна представляє рядок. Оскільки визначення змінної є інструкцією, то після нього ставиться крапка з комою.</p><p>При цьому слід враховувати, що C# є регістрозалежною мовою, тому наступні два визначення змінних будуть представляти дві різні змінні:</p><pre><code>string name;
string Name;
</code></pre><p>Після визначення змінної можна надати деяке значення:</p><pre><code>string name;
name = &quot;Tom&quot;;
</code></pre><p>Оскільки змінна name представляє тип string, тобто рядок, ми можемо присвоїти їй рядок в подвійних лапках. Причому змінній можна присвоїти лише те значення, яке відповідає її типу.</p><p>Надалі за допомогою імені змінної ми зможемо звертатися до тієї області пам&#39;яті, де зберігається її значення.</p><p>Також ми можемо відразу при визначенні присвоїти змінній значення. Цей прийом називається ініціалізацією:</p><pre><code>string name = &quot;Tom&quot;;
</code></pre><p>Відмінною рисою змінних є те, що у програмі можна багаторазово змінювати їх значення. Наприклад, створимо невелику програму, в якій визначимо змінну, змінимо її значення та виведемо його на консоль:</p><pre><code>string name = &quot;Tom&quot;;  

Console.WriteLine(name);    // Tom

name = &quot;Bob&quot;;       
Console.WriteLine(name);    // Bob
</code></pre><p>Консольний вивід програми:</p><pre><code>Tom
Bob
</code></pre><h2 id="константи" tabindex="-1"><a class="header-anchor" href="#константи"><span>Константи</span></a></h2><p>Відмінною особливістю змінних є те, що ми можемо змінити їхнє значення в процесі роботи програми. Але, крім того, у C# є константи. Константа має бути обов&#39;язково ініціалізована при визначенні, і після визначення значення константи не може бути змінено.</p><p>Константи призначені для опису таких значень, які не повинні змінюватись у програмі. Для визначення констант використовується ключове слово const, яке вказується перед типом константи:</p><pre><code>const string NAME = &quot;Tom&quot;; // Визначаємо константу
</code></pre><p>Так, у даному випадку визначено константу NAME, яка зберігає рядок &quot;Tom&quot;. Нерідко для назви констант використовується верхній регістр, але це не більше ніж умовність.</p><p>При використанні констант слід пам&#39;ятати, що оголосити ми їх можемо лише один раз і що на момент компіляції вони повинні бути визначені. Так, у наступному випадку ми отримаємо помилку, тому що константі не надано початкове значення:</p><pre><code>const string NAME; //! Помилка - константа NAME не ініціалізована
</code></pre><p>Крім того, ми її не зможемо змінити у процесі роботи програми:</p><pre><code>const string NAME = &quot;Tom&quot;; // Визначаємо константу
NAME = &quot;Bob&quot;; // !Помилка - константі не можна змінити значення
</code></pre><p>Таким чином, якщо нам треба зберігати у програмі деякі дані, але їх не слід змінити, вони визначаються у вигляді констант. Якщо їх можна змінювати, всі вони визначаються у вигляді змінних.</p>`,31),i=[r];function c(a,s){return o(),t("div",null,i)}const l=e(n,[["render",c],["__file","topic2.html.vue"]]),u=JSON.parse('{"path":"/theory/theory2/topic2.html","title":"Змінні та константи","lang":"en-US","frontmatter":{"title":"Змінні та константи"},"headers":[{"level":2,"title":"Константи","slug":"константи","link":"#константи","children":[]}],"git":{"createdTime":1712559663000,"updatedTime":1712559663000,"contributors":[{"name":"VasylMartynWork","email":"killermbjustthink@gmail.com","commits":1}]},"readingTime":{"minutes":1.76,"words":527},"filePathRelative":"theory/theory2/topic2.md","localizedDate":"April 8, 2024"}');export{l as comp,u as data};
