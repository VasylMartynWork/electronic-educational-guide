import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o,c as t,f as n}from"./app-CX4iMBMp.js";const i={},r=n(`<h2 id="виконання-програми" tabindex="-1"><a class="header-anchor" href="#виконання-програми"><span>Виконання програми</span></a></h2><p>Весь код програми мовою C# міститься у файли з розширенням .cs. За замовчуванням у проекті, який створюється у Visual Studio (а також при використанні .NET CLI), вже є один файл з кодом C# - файл Program.cs з наступним вмістом:</p><pre><code>// See https://aka.ms/new-console-template for more information
Console.WriteLine(&quot;Hello, World!&quot;);
</code></pre><p>Саме код файлу Program.cs виконується за умовчанням, якщо ми запустимо проєкт. Але за потреби ми також можемо додавати інші файли з кодом C#.</p><h2 id="інструкціі" tabindex="-1"><a class="header-anchor" href="#інструкціі"><span>Інструкції</span></a></h2><p>Базовим будівельним блоком програми є інструкції (statement). Інструкція представляє певну дію, наприклад, арифметичну операцію, виклик методу, оголошення змінної та присвоєння їй значення. Наприкінці кожної інструкції C# ставиться крапка з комою ( ; ). Цей знак вказує компілятору на кінець інструкції. Наприклад, у проекті консольної програми, який створюється за замовчуванням, є такий рядок:</p><pre><code>Console.WriteLine(&quot;Hello, World!&quot;);
</code></pre><p>Цей рядок представляє виклик методу Console.WriteLine, який виводить на консоль рядок. В даному випадку, виклик методу є інструкцією і тому завершується точкою з комою.</p><p>Набір інструкцій може поєднуватися в блок коду. Блок коду загортується в фігурні дужки, а інструкції поміщаються між відкриваючою і закриваючою фігурними дужками. Наприклад, змінимо код файлу Program.cs на наступний:</p><pre><code>{
    Console.WriteLine(&quot;Привіт&quot;);
    Console.WriteLine(&quot;Ласкаво просимо до C#&quot;);
}
</code></pre><p>Тут блок коду містить дві інструкції. І при виконанні цього коду, консоль виведе два рядки:</p><pre><code>Привіт
Ласкаво просимо до С#
</code></pre><p>У цьому блоці коду дві інструкції, які виводять на консоль певний рядок.</p><p>Одні блоки коду можуть містити інші блоки:</p><pre><code>{
    Console.WriteLine(&quot;Перший блок&quot;);
    {
        Console.WriteLine(&quot;Другий блок&quot;);
    }
}
</code></pre><h2 id="регістрозалежність" tabindex="-1"><a class="header-anchor" href="#регістрозалежність"><span>Регістрозалежність</span></a></h2><p>C# є регістрозалежною мовою. Це означає, що в залежності від регістру символів певні назви можуть представляти різні класи, методи, змінні тощо. Наприклад, для виведення на консоль використовується метод WriteLine – його ім&#39;я починається саме з великої літери: &quot;WriteLine&quot;. Якщо ми замість &quot;Console.WriteLine&quot; напишемо &quot;Console.writeline&quot;, то програма не скомпілюється, тому що даний метод обов&#39;язково має називатися &quot;WriteLine&quot;, а не &quot;writeline&quot; або &quot;WRITELINE&quot; або якось інакше.</p><h2 id="коментарі" tabindex="-1"><a class="header-anchor" href="#коментарі"><span>Коментарі</span></a></h2><p>Важливою частиною програмного коду є коментарі. Вони не є частиною програми, при компіляції вони ігноруються. Проте коментарі роблять код програми зрозумілішим, допомагаючи зрозуміти ті чи інші його частини.</p><p>Є два типи коментарів: однорядковий та багаторядковий. Однорядковий коментар розміщується на одному рядку після подвійного слешу //. А багаторядковий коментар розташовується між символами /* текст коментаря */. Він може розміщуватись на декількох рядках. Наприклад:</p><pre><code>/*
   перша програма на C#,
   яка виводить привітання в консоль
*/
Console.WriteLine(&quot;Привіт&quot;);                // Виводимо рядок &quot;Привіт&quot;
Console.WriteLine(&quot;Ласкаво просимо до C#&quot;); // Виводимо рядок &quot;Ласкаво просимо до C#&quot;
</code></pre>`,21),l=[r];function a(s,p){return o(),t("div",null,l)}const u=e(i,[["render",a],["__file","topic1.html.vue"]]),h=JSON.parse('{"path":"/theory/theory2/topic1.html","title":"Структура програми","lang":"en-US","frontmatter":{"title":"Структура програми"},"headers":[{"level":2,"title":"Виконання програми","slug":"виконання-програми","link":"#виконання-програми","children":[]},{"level":2,"title":"Інструкції","slug":"інструкціі","link":"#інструкціі","children":[]},{"level":2,"title":"Регістрозалежність","slug":"регістрозалежність","link":"#регістрозалежність","children":[]},{"level":2,"title":"Коментарі","slug":"коментарі","link":"#коментарі","children":[]}],"git":{"createdTime":1712559663000,"updatedTime":1712559663000,"contributors":[{"name":"VasylMartynWork","email":"killermbjustthink@gmail.com","commits":1}]},"readingTime":{"minutes":1.33,"words":398},"filePathRelative":"theory/theory2/topic1.md","localizedDate":"April 8, 2024"}');export{u as comp,h as data};
